#!/usr/bin/env ruby

require "sqlite3"
require "fileutils"
require "pathname"
require "json"
require "pp"

class MainDb
  def initialize(path)
    @path = path
    @db = SQLite3::Database.new(path)
  end
  def get_data(query)
    columns, *rows = @db.execute2(query)
    rv = []
    rows.each do |row|
      ht = {}
      (0...columns.size).each do |i|
        ht[columns[i]] = row[i] unless row[i].nil?
      end
      rv << ht
    end
    rv
  end
  def account_data
    get_data("select * from Accounts")
  end
  def contact_data
    get_data("select * from Contacts")
  end
end

class ExportDirectoryBuilder
  def initialize(path)
    @path = Pathname(path)
  end
  def prepare!
    @path.rmtree if @path.exist?
    @path.mkpath
  end
  def save_binary_file!(file_name, data)
    file_path = @path + file_name
    file_path.dirname.mkpath
    file_path.open('wb') do |fh|
      fh.write(data)
    end
    file_path
  end
  def save_avatar!(skype_name, data)
    warn "Avatar for #{skype_name} might be incorrect" unless data[0, 5].bytes == "\x00\xFF\xD8\xFF\xE0".bytes
    save_binary_file!("avatars/#{skype_name}.jpg", data[1..-1])
  end

  def save_text_file!(file_name, data, converter)
    (@path + file_name).open('w') do |fh|
      data.each do |row|
        send(converter, row) do |key, val|
          fh.puts "#{key}: #{val}"
        end
        fh.puts ""
      end
    end
  end
  # accounts and contacts are very similar, so use the same code for both
  def convert_account(row)
    row.each do |key, val|
      case key
      when "capabilities",
           "synced_email",
           "cbl_profile_blob",
           "authorization_certificate",
           "saved_directory_blob",
           "buddyblob"
        # pass
      when "avatar_image"
        yield key, save_avatar!(row["skypename"], val)
      when "profile_attachments"
        yield key, save_binary_file!("#{row["skypename"]}_attachment.data", val)
      else
        yield key, val.inspect
      end
    end
  end
  def export_accounts!(data)
    save_text_file!("accounts.txt", data, :convert_account)
  end
  def export_contacts!(data)
    save_text_file!("contacts.txt", data, :convert_account)
  end
end

class SkypeExporter
  def initialize(db_path, output_path)
    @db = MainDb.new(db_path)
    @out = ExportDirectoryBuilder.new(output_path)
  end

  def export!
    @out.prepare!
    @out.export_accounts! @db.account_data
    @out.export_contacts! @db.contact_data
  end
end

se = SkypeExporter.new("main.db", "output")
se.export!
